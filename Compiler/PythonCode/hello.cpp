#include <stdio.h>
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_io.h"

#define S00_AXIS_TDATA (u64)0x0
#define S00_AXIS_TVALID (u64)0x1
#define DAC00_FAST_SHUTDOWN (u64)0x2
#define DAC00_PL_EVENT (u64)0x3
#define DAC00_NCO_FREQ (u64)0x4
#define DAC00_NCO_PHASE (u64)0x5
#define DAC00_NCO_PHASE_RST (u64)0x6
#define DAC00_NCO_UPDATE_EN (u64)0x7
#define DAC0_NCO_UPDATE_REQ (u64)0x8
#define DAC0_SYSREF_INT_GATING (u64)0x9
#define DAC0_SYSREF_INT_REENABLE (u64)0xA
#define UPDATE (u64)0xF

#define AXI_LEN = 0x10;
#define M_AXI_HPM0_FPD_ADDR XPAR_AXI_HPM0_FPD_0_S_AXI_BASEADDR
#define M_AXI_HPM1_FPD_ADDR XPAR_AXI_HPM1_FPD_0_S_AXI_BASEADDR
#define MAKE128CONST(hi,lo) ((((__uint128_t)hi << 64) | lo))

static INLINE void Xil_Out128(UINTPTR Addr, __uint128_t Value)
{
    volatile __uint128_t *LocalAddr = (volatile __uint128_t *)Addr;
    *LocalAddr = Value;
}

class A{
    public:
        int a;
    public:
        A(int a);
        void class_made(int c);

};


A::A(int a){
    this->a = a;
}

void A::class_made(int c){
    return;
}


int foo(int n ){
    if( n >= 0){
        return n + foo(n-1);
    }
    else{
        return 0;
    }
}

int goo(int c){
    return c;
}

int main(){
    int a;
    a = 30;

    A a_class(a);
    a_class.class_made(20);
    goo(13);
    goo(24);

    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST(0,0));
    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST(0,2));

    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000005,( DAC00_FAST_SHUTDOWN<<32)+((u64)255<<40)));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000010,( DAC00_PL_EVENT << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000020,( DAC00_NCO_FREQ << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000030,( DAC00_NCO_PHASE << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000040,( DAC00_NCO_PHASE_RST << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000050,( DAC0_SYSREF_INT_GATING << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000060,( DAC0_SYSREF_INT_REENABLE << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000065,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000C0,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00007fff));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000D0,( S00_AXIS_TVALID << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00000001));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000E0,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) +(u64) 0x00000000));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000F0,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000010));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000100,( DAC00_NCO_UPDATE_EN << 32 ) + ( (u64) 255 << 40 ) + (u64)7));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000110,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 255 << 40 ) + (u64)0x0020));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000140,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000600,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) + (u64)0x00000000));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000610,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000001));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000620,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 244 << 40 ) + (u64)0x0020));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000630,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    //Change frequency

    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A00,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) + (u64)0x00000000));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A10,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000008));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A20,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 255<< 40 ) + (u64)0x0020));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A30,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    //Change Amplitude

    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000B00,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00000000));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000B10,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000D00,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00007fff));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000D10,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    //TimeController

    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST(0,2));
    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST(0,9));
    
    return 0;
}

