
/*

class DAC{
    public:
        UINTPTR addr;
        uint64_t sample_freq;
    public:
        DAC(UINTPTR addr, uint64_t sample_freq = 6400000000){
            this-> addr = addr;
            this->sample_freq = sample_freq;
        };
        void initialize(uint64_t timestamp);
        void set_freq(uint64_t timestamp,uint64_t freq);
        void set_amp(uint64_t timestamp, double amp);
};

class TimeController{
    public:
        UINTPTR addr;
    public:
        TimeController(UINTPTR addr){
            this-> addr = addr;
        };
        void reset();
        void auto_start();
        void auto_stop();
};

void DAC::initialize(uint64_t timestamp = 0){
    Xil_Out128(this-> addr,MAKE128CONST(10 + timestamp,( DAC00_FAST_SHUTDOWN<<32)+((u64)255<<40)));
    
    Xil_Out128(this-> addr,MAKE128CONST(20 + timestamp,( DAC00_PL_EVENT << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(this-> addr,MAKE128CONST(30 + timestamp,( DAC00_NCO_FREQ << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(this-> addr,MAKE128CONST(40 + timestamp,( DAC00_NCO_PHASE << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(this-> addr,MAKE128CONST(50 + timestamp,( DAC00_NCO_PHASE_RST << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(this-> addr,MAKE128CONST(60 + timestamp,( DAC0_SYSREF_INT_GATING << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(this-> addr,MAKE128CONST(70 + timestamp,( DAC0_SYSREF_INT_REENABLE << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(this-> addr,MAKE128CONST(90 + timestamp,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00007fff));
    
    Xil_Out128(this-> addr,MAKE128CONST(100 + timestamp,( S00_AXIS_TVALID << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00000001));
    
    Xil_Out128(this-> addr,MAKE128CONST(110 + timestamp,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) +(u64) 0x00000000));
    
    Xil_Out128(this-> addr,MAKE128CONST(120 + timestamp,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000000));
    
    Xil_Out128(this-> addr,MAKE128CONST(130 + timestamp,( DAC00_NCO_UPDATE_EN << 32 ) + ( (u64) 255 << 40 ) + (u64)7));
    
    Xil_Out128(this-> addr,MAKE128CONST(140 + timestamp,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 255 << 40 ) + (u64)10)); // last value is update signal width
    
    Xil_Out128(this-> addr,MAKE128CONST(160 + timestamp,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00000000));
    
    Xil_Out128(this-> addr,MAKE128CONST(170 + timestamp,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
}

void DAC::set_freq(uint64_t timestamp,uint64_t freq){
    uint64_t input_freq;
    input_freq = (uint64_t)(freq/(this->sample_freq));
    //Xil_Out128(this-> addr,MAKE128CONST(timestamp,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) + (u64)(input_freq & 0xffffffff)));
    
    //Xil_Out128(this-> addr,MAKE128CONST(timestamp + 10,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)((input_freq >> 32) & 0xffff)));


    Xil_Out128(this-> addr,MAKE128CONST(timestamp,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) + (u64)(0x00000000)));
    
    Xil_Out128(this-> addr,MAKE128CONST(timestamp + 10,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)(0x0004)));
    
    Xil_Out128(this-> addr,MAKE128CONST(timestamp + 20,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 255<< 40 ) + (u64)10));
    
    Xil_Out128(this-> addr,MAKE128CONST(timestamp + 30,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
}

void DAC::set_amp(uint64_t timestamp, double amp){
    uint64_t input_amp;
    input_amp = (uint64_t)(amp * (1 << 15));
    Xil_Out128(this-> addr,MAKE128CONST(timestamp,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)(0x00007fff)));
    
    Xil_Out128(this-> addr,MAKE128CONST(timestamp + 10,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
}

void TimeController::reset(){
    Xil_Out128(this-> addr,MAKE128CONST(0,2));
}

void TimeController::auto_start(){
    Xil_Out128(this-> addr,MAKE128CONST(0,9));
}

void TimeController::auto_stop(){
    Xil_Out128(this-> addr,MAKE128CONST(0,0));
}
*/

int main(){
    /*
    DAC dac00 = DAC((UINTPTR)XPAR_DAC_CONTROLLER_0_BASEADDR,6400000000);
    TimeController tc = TimeController((UINTPTR)XPAR_TIMECONTROLLER_0_BASEADDR);
    tc.auto_stop();
    tc.reset();
    dac00.initialize(10);
    dac00.set_freq(500,10000);
    dac00.set_amp(600,0.6);
    tc.reset();
    tc.auto_start();
    */
    
    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST((u64)0,(u64)0));
    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST((u64)0,(u64)2));
    /*
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR + (uint64_t)0x10,MAKE128CONST((u64)0, (u64)1));

    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000005,( DAC00_FAST_SHUTDOWN<<32)+((u64)255<<40)));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000010,( DAC00_PL_EVENT << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000020,( DAC00_NCO_FREQ << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000030,( DAC00_NCO_PHASE << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000040,( DAC00_NCO_PHASE_RST << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000050,( DAC0_SYSREF_INT_GATING << 32 ) + ( (u64) 255 << 40 )));
   
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000060,( DAC0_SYSREF_INT_REENABLE << 32 ) + ( (u64) 255 << 40 )));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000065,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
   
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000C0,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00007fff));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000D0,( S00_AXIS_TVALID << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00000001));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000E0,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) +(u64) 0x00000000));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x00000000000000F0,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000015));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000100,( DAC00_NCO_UPDATE_EN << 32 ) + ( (u64) 255 << 40 ) + (u64)7));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000110,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 255 << 40 ) + (u64)0x0005));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000140,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000600,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) + (u64)0x00000000));
   
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000610,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000001));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000620,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 244 << 40 ) + (u64)0x0005));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000630,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    //Change frequency

    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A00,( DAC00_NCO_FREQ << 32 ) + ( (u64) 1 << 40 ) + (u64)0x00000000));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A10,( DAC00_NCO_FREQ << 32 ) + ( (u64) 2 << 40 ) + (u64)0x00000002));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A20,( DAC0_NCO_UPDATE_REQ << 32 ) + ( (u64) 255<< 40 ) + (u64)0x0010));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000A30,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    //Change Amplitude
 
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000D00,( S00_AXIS_TDATA << 32 ) + ( (u64) 255 << 40 ) + (u64)0x00007fff));
    
    Xil_Out128(XPAR_DAC_CONTROLLER_0_BASEADDR,MAKE128CONST(0x0000000000000D10,( UPDATE << 32 ) + ( (u64) 255 << 40 ) + ( (u64) 1 << 36 ) + (u64)1));
    
    //TimeController

    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST(0,2));
    
    Xil_Out128(XPAR_TIMECONTROLLER_0_BASEADDR,MAKE128CONST(0,9));
    */
    
    return 0;
}